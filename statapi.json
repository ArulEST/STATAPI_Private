{
  "openapi": "3.0.0",
  "info": {
    "title": "STATAPI-vNEXT",
    "x-logo": {
      "url": "../Redoc/Image/logo.png",
      "altText": "STAT logo"
    }
  },
  "tags": [
    {
      "name": "vNEXT",
      "description": "# Solution Approach\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The objective is to enhance the performance of our application by optimizing response times. \n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; To facilitate the seamless integration of a high-volume client into our application, we use Cosmos database that significantly improved response times, reducing the processing time for order requests.  \n<h3><b>Concept</b></h3>\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; When the user hits the new endpoint, it interacts with Cosmos, creates a temporary record and returns the response to the user with a standard set of information. \n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; A distinct process is executed which retrieves the temporary records from Cosmos and generates an order in SQL DB.  \n\n<img src=\"../Redoc/Image/flowchart.png\" />\n\n<h3><b>Validation with Header-bound API keys</b></h3>\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; With the header-bound API keys, the validation is performed. When a vNext order creation endpoint is triggered, the API Key Message Handler validates the API key from the request header against the key available in the Cosmos DB, which currently serves as the central repository for API key validation. \n\n<h3><b>Workflow Procedure</b></h3>\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If the validation fails due to the non-existence of the API key in the Cosmos DB, the process halts, triggering an exception with the message \"<i>API key is invalid</i>\". \n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Once the request header key is validated, using STAT base API controller, the customer API key, feature flag and price set of the customer have to be fetched from the cosmos DB. \n\n<h3><b>JSON Validation</b></h3>\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The next step is to verify the input JSON, by checking whether the order endpoint holds the serviceable zip code and valid price set.  \n  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Zipcode validation</b> - With the predefined conditions stored in the Cosmos DB, the zip code will be checked if it comes under the serviceable proximity region. \n  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Price set validation</b> - If the customer has the valid price set, the order request will be stored in the Cosmos DB.  \n\n<h3><b>Results:</b></h3>\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Success</b> - When the zip code and price set validation succeed, a success response is generated confirming the order creation. \n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Failure</b> - However, if the validation fails due to zip code or price set, the order request is not stored, and the system generates the exceptions as a response.\n\n<img src=\"../Redoc/Image/workflow.png\" />\n\n<h3><b>Master data that exists in Cosmos:</b></h3>\n  <ul>\n    <li>API key</li>\n    <li>ZipCodes</li>\n  </ul>\n\n# Code Snippet  \n\n<h3><b>Creating an order in Cosmos</b></h3>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The order request header key is verified against the API key in Cosmos DB.  \n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If the key is found in Cosmos DB, the isvalid status will be set to True. \n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If the key is not found in Cosmos DB, the request header key is then checked against the ASP Net user table ID in the SQL DB. \n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If the validation is successful, the isvalid status will be set to True. \n\n\n\n<img src=\"../Redoc/Codesnippet/vNEXT/OrderCreation/vnext_order_1.png\" />\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If the validation is unsuccessful, verify whether the Bearer token is present in the header and that the parameter is not empty.\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If the Bearer token is absent, examine the header for parameters with the keys \"type,\" \"wise,\" and \"scheduler.\" If any one of these parameters is present, set isvalid to true. \n\n\n\n<img src=\"../Redoc/Codesnippet/vNEXT/OrderCreation/vnext_order_2.png\" />\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; When an order is initiated from the STAT Portal, the CustomerId found in the header is employed to authenticate the endpoint request. \n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If the customer ID is found in the SQL table, the isvalid status is set to true.  \n\n<img src=\"../Redoc/Codesnippet/vNEXT/OrderCreation/vnext_order_3.png\" />\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If none of the above-mentioned conditions are met, and if the endpoint is \"api/OnTimeUpdates\", isvalid will be set to true. For all other endpoints, isvalid will be false, and the response returned will be \"<i>Api Key Not Valid</i>.\" \n\n<img src=\"../Redoc/Codesnippet/vNEXT/OrderCreation/vnext_order_4.png\" />\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Verify the API key in Cosmos DB and confirm whether the retrieved key exists in the customer table. If it exists, associate it with the API key list; if not, raise an exception “<i>Something went wrong. Please contact STAT support</i>” \n\n<img src=\"../Redoc/Codesnippet/vNEXT/OrderCreation/vnext_order_5.png\" />\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Validate the Create Order request values against the collection and delivery location details. \n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; First, verify that the address Line 1, City, State, and Postal code are valid. If any of these details are invalid, send the respective exceptions. \n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Next, ensure that the \"Deliverysignaturerequired\" condition is true, the \"isadultsignature\" condition in the orderDTO is also true, and the signature type is not empty. All these conditions collectively indicate that the order is ready to be placed. \n\n<img src=\"../Redoc/Codesnippet/vNEXT/OrderCreation/vnext_order_6.png\" />\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Validate if the delivery zip code falls within the serviceable region and if there is a valid price set for the customer. \n\n<img src=\"../Redoc/Codesnippet/vNEXT/OrderCreation/vnext_order_7.png\" />\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If all the above conditions are met, \"Create Order\" values are stored in Cosmos DB. \n\n<img src=\"../Redoc/Codesnippet/vNEXT/OrderCreation/vnext_order_8.png\" />\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Trigger an entry to the service bus “<b>customorderprocess</b>” \n\n<img src=\"../Redoc/Codesnippet/vNEXT/OrderCreation/vnext_order_9.png\" />\n\n<h3><b>Service Bus</b></h3>\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The Azure function called \"<b>customorderprocess</b>\" is configured as depicted in the image. \n\n<img src=\"../Redoc/Codesnippet/vNEXT/OrderCreation/Servicebus/vnext_servicebus_config.png\" />\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The Cosmos DB temporary order record includes a UID, which is a unique identifier generated by STAT for each order. This UID is transmitted to the service bus. \n\n<img src=\"../Redoc/Codesnippet/vNEXT/OrderCreation/Servicebus/vnext_servicebus_1.png\" />\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The order's UID is subsequently passed to the service bus for processing. \n\n<img src=\"../Redoc/Codesnippet/vNEXT/OrderCreation/Servicebus/vnext_servicebus_2.png\" />\n\n<h3><b>Azure function</b></h3>\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The Azure function called \"CustomOrder\" is configured as depicted in the image. \n\n<img src=\"../Redoc/Codesnippet/vNEXT/OrderCreation/Azure_Function/vnext_azurefunction_config.png\" />\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Following that, the UID is verified against the \"order detail\" collection in Cosmos to retrieve the corresponding data. \n\n<img src=\"../Redoc/Codesnippet/vNEXT/OrderCreation/Azure_Function/vnext_azurefunction_1.png\" />\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The data is transformed into JSON format, and then the PostOrderUsingSTAT_API method is invoked.  \n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; In case the method call encounters a failure, it will undergo up to 10 retry attempts, with the following time intervals (in seconds):  \n\n<img src=\"../Redoc/Codesnippet/vNEXT/OrderCreation/Azure_Function/vnext_azurefunction_retrycount.png\" />\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If the method call still fails after the 10th attempt, a notification email will be sent to the configured email address with the following message: \n\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; “<i>Hi there</i>, \n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <i>The Order# {trackingNumber} creation failed in STAT Portal, it exceeded max retry attempts</i>.\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <i>Thanks</i>, \n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <i>STAT Team</i>” \n\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If further retries are required after the initial 10 attempts, they will take place at intervals of 1800 seconds. \n\n<img src=\"../Redoc/Codesnippet/vNEXT/OrderCreation/Azure_Function/vnext_azurefunction_2.png\" />\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The JSON data and the API key are supplied as parameters to the <b>PostOrdersUsingSTAT_API</b> method. Subsequently, the order is generated in the SQL database via the endpoint “api/orders”, and the outcome of the order placement, either success or failure, is returned. \n\n<img src=\"../Redoc/Codesnippet/vNEXT/OrderCreation/Azure_Function/vnext_azurefunction_3.png\" />\n\n<h3><b>Master Sync</b></h3>\n\n<b>Automatic</b> \n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; There are two Azure functions employed to synchronize master data from SQL to Cosmos DB, scheduled to run daily at 2 AM. \n\n<ul>\n  <li>SyncCustomerValues</li>\n  <li>SyncZipCode</li>\n</ul>\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; In the automatic mode, if any modifications occur in the customer API key outside of application, <b>SyncCustomerValues</b> function automatically detects these changes and transmits the updated information to the Azure service bus for customer data synchronization in Cosmos.  \n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If no changes are detected, the system sends the existing data for synchronization. This process occurs daily at 2 AM. \n\n<img src=\"../Redoc/Codesnippet/vNEXT/OrderCreation/Master_Sync/vnext_mastersync_1.png\" />\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If any modifications occur in the Zip code, <b>SyncZipCode</b> function automatically detects these changes and transmits the updated information to the Azure service bus for customer data synchronization in Cosmos.   \n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If no changes are detected, the system sends the existing data for synchronization. This process occurs daily at 2 AM. \n\n<img src=\"../Redoc/Codesnippet/vNEXT/OrderCreation/Master_Sync/vnext_mastersync_2.png\" />\n\n<b>Manual</b> \n\n#### ZipCodeSyncCosmos\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If the zip code is modified via the STAT app portal, the “<b>ZipCodeSyncCosmos</b>” function will trigger a request to the Azure service bus instantly to synchronize the updated zip code information with Cosmos DB. \n\n<img src=\"../Redoc/Codesnippet/vNEXT/OrderCreation/Master_Sync/vnext_mastersync_3.png\" />\n\n#### CustomerSyncCosmos\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If the customer API key is modified via the STAT app portal, the “<b>CustomerSyncCosmos</b>” function will trigger a request to the Azure service bus instantly to synchronize the updated zip code information with Cosmos DB. \n\n<img src=\"../Redoc/Codesnippet/vNEXT/OrderCreation/Master_Sync/vnext_mastersync_4.png\" />\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; With the help of customer's ID, customer's API key is checked and the newly received data will be applied as updates for that specific customer. \n\n<img src=\"../Redoc/Codesnippet/vNEXT/OrderCreation/Master_Sync/vnext_mastersync_1_1.png\" />\n<img src=\"../Redoc/Codesnippet/vNEXT/OrderCreation/Master_Sync/vnext_mastersync_1_2.png\" />\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; With the help of customer's ID, the zip code is checked and the newly received data will be applied as updates for that specific customer.\n\n<img src=\"../Redoc/Codesnippet/vNEXT/OrderCreation/Master_Sync/vnext_mastersync_2_1.png\" />\n<img src=\"../Redoc/Codesnippet/vNEXT/OrderCreation/Master_Sync/vnext_mastersync_2_2.png\" />\n"
    }
  ],
  "x-tagGroups": [
    {
      "name": "General",
      "tags": [
        "vNEXT"
      ]
    }
  ]
}